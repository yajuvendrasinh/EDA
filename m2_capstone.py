# -*- coding: utf-8 -*-
"""M2 Capstone

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ubJP58VLgAJ9ulhzu4OCxDMs8NbR5Lx

#**EDA of Paisabazaar Banking Fraud Analysis**

##**Project Summary**

In today's data-driven era, understanding customer financial behavior is pivotal for informed decision-making in industries like banking, finance, and retail. This project, **Customer Financial Behavior Analysis**, aims to uncover meaningful insights from customer data, enabling better segmentation, risk assessment, and targeted offerings.

Through advanced data analysis techniques, we explored various facets of customer behavior, including income levels, credit utilization, payment patterns, and fraud detection. By leveraging statistical analysis, clustering methods, and visualizations, we were able to identify key trends, correlations, and anomalies in the dataset.

## Key Focus Areas:
1. **Correlation Analysis**: Identifying relationships between key variables such as income, credit utilization, and outstanding debt, helping us understand the factors influencing creditworthiness.
2. **Credit Score Analysis**: Exploring customer credit scores to assess their financial stability and risk levels.
3. **Credit Utilization and Debt Analysis**: Examining the impact of outstanding debt and credit utilization ratios on customer behavior and financial health.
4. **Customer Segmentation**: Using clustering techniques to group customers into distinct categories based on financial attributes, aiding in targeted marketing and personalized offerings.
5. **Payment Behavior Analysis**: Investigating trends in customer payment behaviors, highlighting timely and delayed payment patterns.
6. **Fraud Analysis**: Detecting potential fraud cases through data patterns and outliers, ensuring financial security and mitigating risks.
7. **Violin Charts and 3D Visualizations**: Employing advanced visualizations to analyze the distribution and relationships between variables such as income, age, and creditworthiness.

By combining these analyses, the project provides actionable insights into customer behavior, empowering organizations to make data-backed strategic decisions. This comprehensive study not only highlights current trends but also offers predictive insights to anticipate future customer actions.

The findings presented in this report will serve as a valuable resource for businesses aiming to enhance customer understanding, improve risk management, and optimize financial services.

# Objectives and Scope

## Objectives
The primary objectives of this analysis are:
1. **Understand Customer Behavior**: Analyze various financial attributes such as income, credit scores, and payment patterns to identify trends and relationships.
2. **Risk Assessment**: Evaluate credit utilization, outstanding debt, and other key factors to determine customer creditworthiness and financial stability.
3. **Customer Segmentation**: Classify customers into distinct groups using clustering techniques, enabling personalized offerings and targeted marketing strategies.
4. **Fraud Detection**: Identify anomalies in customer behavior and detect potential fraud cases to mitigate risks.
5. **Payment Behavior Insights**: Investigate payment behavior to differentiate between customers who pay on time and those who default.
6. **Predictive Insights**: Use data trends to anticipate future financial behavior and risks.

## Scope of Analysis
The scope of this project covers the following dimensions:
- **Dataset Description**: The dataset includes customer financial details such as annual income, age, outstanding debt, credit utilization ratio, and credit score.
- **Data Preprocessing**: Steps include handling missing values, removing duplicates, and addressing outliers to ensure data accuracy and integrity.
- **Exploratory Data Analysis (EDA)**: Statistical and visual analysis to identify trends, correlations, and anomalies.
- **Clustering and Segmentation**: Employing clustering techniques to segment customers into meaningful groups.
- **Fraud Analysis**: Detecting and interpreting fraud patterns using data-driven methods.
- **Visualizations**: Leveraging various plots such as correlation heatmaps, scatter plots, violin charts, and 3D scatterplots to interpret data effectively.

By aligning these objectives and scope, the report delivers actionable insights, enabling organizations to make informed decisions and enhance financial operations.

# Problem Statement and Objectives

## Problem Statement
In the highly competitive financial landscape, businesses such as banks and credit institutions face challenges in understanding customer financial behavior. Key issues include accurately assessing creditworthiness, identifying at-risk customers, segmenting the customer base for targeted services, and detecting fraudulent activities. Without data-driven insights, these challenges result in increased risk exposure, inefficiencies in service delivery, and missed opportunities for personalized offerings.

This project seeks to address these challenges by analyzing customer financial data to uncover trends, patterns, and anomalies. By leveraging advanced analytical techniques, the project aims to provide actionable insights that can improve decision-making, enhance customer experiences, and mitigate financial risks.

---

## Objectives
The analysis is guided by the following objectives:

1. **Assess Creditworthiness**:
   - Analyze factors like income, credit utilization, and outstanding debt to evaluate customer credit scores and financial stability.

2. **Understand Payment Behavior**:
   - Investigate customer payment patterns to differentiate between timely payers and defaulters, offering insights into financial reliability.

3. **Customer Segmentation**:
   - Group customers into meaningful segments based on financial attributes such as income, debt levels, and credit utilization. This enables targeted marketing and personalized services.

4. **Detect Fraudulent Activities**:
   - Identify anomalies and suspicious patterns in customer financial data to detect and prevent potential fraud.

5. **Visualize Financial Insights**:
   - Utilize advanced visualizations such as violin charts, scatter plots, and 3D graphs to effectively interpret and communicate data trends.

6. **Provide Predictive Insights**:
   - Leverage data-driven analysis to anticipate future customer behavior and financial risks, aiding proactive decision-making.

By addressing these objectives, the analysis aims to equip organizations with the tools and insights needed to optimize financial operations, improve risk management, and deliver value to customers.

# Dataset Overview
The dataset used for this analysis contains customer financial data collected from various sources. It includes information such as annual income, monthly in-hand salary, credit utilization ratio, outstanding debt, payment behavior, and credit scores. Key details:
- **Size**: 100,000 rows and 28 columns.
- **Data Types**: Numerical, categorical, and text fields.
- **Features**:
  - `Annual_Income`, `Age`: Represent customer demographics and earnings.
  - `Credit_Utilization_Ratio`, `Outstanding_Debt`: Reflect customer financial health.
  - `Credit_Score`: Indicates creditworthiness and risk levels.

# Methodology
The analysis was conducted in the following steps:
1. **Data Cleaning**:
   - Removed duplicate rows and handled missing values.
   - Treated outliers in key features such as `Annual_Income` using the IQR method.
2. **Exploratory Data Analysis (EDA)**:
   - Analyzed distributions, correlations, and patterns in the data.
   - Used heatmaps and visualizations to identify significant relationships.
3. **Segmentation and Clustering**:
   - Grouped customers into clusters using K-Means clustering to enable targeted analysis.
4. **Behavioral Analysis**:
   - Investigated payment behavior, credit utilization, and debt trends.
   - Highlighted differences across credit score categories.
5. **Fraud Detection**:
   - Identified potential fraud cases through anomaly detection and visualization.
6. **Visualizations**:
   - Used violin charts, scatter plots, and 3D graphs to present findings effectively.

# Tools and Techniques
This project was implemented using Python, leveraging the following libraries:
- **pandas and NumPy**: For data manipulation and numerical computations.
- **Matplotlib and Seaborn**: For static data visualizations.
- **Plotly**: For interactive plots such as 3D scatter plots and violin charts.
- **scikit-learn**: For clustering (K-Means) and feature scaling.

# Data Loading and Preprocessing

## Code Explanation
### 1. Importing Libraries
The following libraries were imported to facilitate the analysis:
- **os**: For file handling operations.
- **pandas**: For data manipulation and cleaning.
- **numpy**: For numerical computations.
- **seaborn** and **matplotlib.pyplot**: For creating static visualizations.
- **plotly.express** and **plotly.graph_objects**: For interactive visualizations.
- **google.colab**: For accessing data stored on Google Drive.
"""

import os
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from google.colab import drive

"""### 2. Mounting Google Drive

"""

# Mount Google Drive
drive.mount('/content/drive')

"""### 3. Loading the Dataset"""

# Specify the file path
file_path = '/content/drive/My Drive/AlmaBetter/dataset.csv'

df = pd.read_csv(file_path)

"""### 4. Initial Data Inspection
The following steps provide a quick overview of the dataset:

**Displaying the First and Last Rows:**
"""

df.head()

df.tail()

"""**Statistical Summary:**"""

df.describe()

"""**Data Structure:**


"""

df.info()

"""### 5. Handling Duplicate Values"""

# duplicate values in data set

duplicate_rows = df[df.duplicated()]

print(f"Number of duplicate rows: {len(duplicate_rows)}")

"""### 6. Handling Missing Values"""

# missing values

missing_values = df.isnull().sum()

print(missing_values)

missing_percentage = (df.isnull().sum() / len(df)) * 100

missing_percentage

"""### 7. Counting Unique Values"""

# prompt: count Unique Values for each coulmn

print("Unique values")
for col in df.columns:
    print(f"{col}: {df[col].nunique()}")

"""### 8. Handling Outliers in Annual_Income
To handle outliers in the Annual_Income column, the Interquartile Range (IQR) method was applied:


"""

# Handle outliers for  'Annual_Income'

Q1 = df['Annual_Income'].quantile(0.25)
Q3 = df['Annual_Income'].quantile(0.75)
IQR = Q3 - Q1
df = df[(df['Annual_Income'] >= (Q1 - 1.5 * IQR)) & (df['Annual_Income'] <= (Q3 + 1.5 * IQR))]

"""# Visual Analysis and Findings

## 1. Distribution of `Annual_Income` (Before and After Outlier Removal)


"""

# Visualize 'Annual_Income'
plt.figure(figsize=(10, 6))
sns.histplot(df['Annual_Income'], kde=True)
plt.title('Distribution of Annual Income (Before Outlier Removal)')
plt.xlabel('Annual Income')
plt.ylabel('Frequency')
plt.show()

"""## 2. Correlation Heatmap



*   This heatmap visualizes the correlation coefficients between numerical features.
*   Dark red indicates a strong positive correlation, and dark blue indicates a strong negative correlation.


### **Findings**
#### Strong Positive Correlations:
* Monthly_Inhand_Salary and Annual_Income show a strong positive correlation, as expected.
* Outstanding_Debt and Credit_Utilization_Ratio are moderately positively correlated.

#### Negative Correlations:
* Monthly_Balance is negatively correlated with Credit_Utilization_Ratio, indicating that high credit utilization often results in lower balances.
"""

# Select only numerical columns for correlation analysis
numerical_columns = [
    'Age', 'Annual_Income', 'Monthly_Inhand_Salary',
    'Num_Bank_Accounts', 'Num_Credit_Card', 'Interest_Rate',
    'Num_of_Loan', 'Credit_Utilization_Ratio', 'Outstanding_Debt',
    'Total_EMI_per_month', 'Amount_invested_monthly', 'Monthly_Balance'
]

# Compute the correlation matrix
correlation_matrix = df[numerical_columns].corr()

# Convert the correlation matrix to a NumPy array for annotations
correlation_values = correlation_matrix.to_numpy()

# Create the heatmap with Plotly
fig = go.Figure(
    data=go.Heatmap(
        z=correlation_values,
        x=numerical_columns,
        y=numerical_columns,
        colorscale='RdBu',
        zmin=-1,  # Minimum correlation value
        zmax=1,   # Maximum correlation value
        colorbar=dict(title="Correlation")
    )
)

# Add annotations (correlation labels) to the heatmap
for i in range(len(correlation_values)):
    for j in range(len(correlation_values)):
        fig.add_annotation(
            x=numerical_columns[j],
            y=numerical_columns[i],
            text=f"{correlation_values[i, j]:.2f}",
            showarrow=False,
            font=dict(color="black" if abs(correlation_values[i, j]) < 0.5 else "white")
        )

# Update layout for better appearance
fig.update_layout(
    title="Correlation Heatmap with Annotations",
    xaxis_title="Features",
    yaxis_title="Features",
    width=900,
    height=900
)

fig.show()

"""## 3. Credit Score Distribution

* This histogram visualizes the distribution of credit scores across categories (Good, Standard, Poor).
### Findings

* Good & Standard Credit Score: The majority of customers fall under the "Good" category, indicating a financially responsible customer base.
* Poor Credit Score: A smaller proportion of customers have poor credit scores, suggesting they may be at higher financial risk.
"""

# Visualize Credit Score distribution


fig = px.histogram(
    df,
    x='Credit_Score',
    color='Credit_Score',
    title='Distribution of Credit Score Categories',
    labels={'Credit_Score': 'Credit Score'},
    width=800,
    height=500
)

fig.update_layout(
    xaxis_title="Credit Score Categories",
    yaxis_title="Count",
    showlegend=False
)

fig.show()

"""## 4. Annual Income Across Credit Score Categories

## Findings
* Customers with a "Good" credit score generally have higher annual incomes compared to "Poor" and "Standard" categories.
* The spread of income is wider for "Good" credit scores, indicating a diverse income range among financially stable individuals.

"""

fig = px.box(
    df,
    x='Credit_Score',
    y='Annual_Income',
    color='Credit_Score',
    title='Annual Income Across Credit Score Categories',
    labels={'Annual_Income': 'Annual Income', 'Credit_Score': 'Credit Score'},
    width=800,
    height=500
)

fig.update_traces(boxmean='sd')  # Show mean and standard deviation
fig.show()

fig = px.box(
    df,
    x='Credit_Score',
    y='Credit_Utilization_Ratio',
    color='Credit_Score',
    title='Credit Utilization Ratio Across Credit Score Categories',
    labels={'Credit_Utilization_Ratio': 'Credit Utilization Ratio', 'Credit_Score': 'Credit Score'},
    width=800,
    height=500
)

fig.update_traces(boxmean='sd')  # Show mean and standard deviation
fig.show()

# Aggregate metrics by Credit Score
summary = df.groupby('Credit_Score')[['Annual_Income', 'Credit_Utilization_Ratio', 'Monthly_Balance']].mean()
print("Average Metrics by Credit Score Category:")
print(summary)

# Visualize the distribution of Credit Utilization Ratio
fig = px.histogram(
    df,
    x='Credit_Utilization_Ratio',
    nbins=50,
    title='Distribution of Credit Utilization Ratio',
    labels={'Credit_Utilization_Ratio': 'Credit Utilization Ratio'},
    color_discrete_sequence=['blue'],
    width=800,
    height=500
)

fig.update_layout(
    xaxis_title="Credit Utilization Ratio",
    yaxis_title="Count"
)

fig.show()

# Box plot for Credit Utilization Ratio by Credit Score
fig = px.box(
    df,
    x='Credit_Score',
    y='Credit_Utilization_Ratio',
    color='Credit_Score',
    title='Credit Utilization Ratio Across Credit Score Categories',
    labels={'Credit_Utilization_Ratio': 'Credit Utilization Ratio', 'Credit_Score': 'Credit Score'},
    width=800,
    height=500
)

fig.update_traces(boxmean='sd')  # Show mean and standard deviation
fig.show()

# Correlation with key features
key_features = ['Monthly_Balance', 'Outstanding_Debt', 'Annual_Income']
correlations = df[['Credit_Utilization_Ratio'] + key_features].corr()

print("Correlation with Credit Utilization Ratio:")
print(correlations['Credit_Utilization_Ratio'])

# Scatter plot for Credit Utilization Ratio vs. Outstanding Debt
fig = px.scatter(
    df,
    x='Outstanding_Debt',
    y='Credit_Utilization_Ratio',
    color='Credit_Score',
    title='Credit Utilization Ratio vs. Outstanding Debt',
    labels={'Credit_Utilization_Ratio': 'Credit Utilization Ratio', 'Outstanding_Debt': 'Outstanding Debt'},
    width=1100,
    height=800
)

fig.update_traces(marker=dict(size=2.5, opacity=0.6))
fig.show()

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Select relevant features for clustering
clustering_features = ['Annual_Income', 'Credit_Utilization_Ratio', 'Age']

# Standardize the data
scaler = StandardScaler()
scaled_features = scaler.fit_transform(df[clustering_features])

# Perform KMeans clustering
kmeans = KMeans(n_clusters=3, random_state=42)
df['Cluster'] = kmeans.fit_predict(scaled_features)

# Create the 3D scatter plot
fig = px.scatter_3d(
    df,
    x='Annual_Income',
    y='Credit_Utilization_Ratio',
    z='Age',
    color='Cluster',  # Ensure this matches the column name for cluster labels
    title='Customer Segmentation in 3D (Annual Income, Credit Utilization, Age)',
    labels={
        'Annual_Income': 'Annual Income',
        'Credit_Utilization_Ratio': 'Credit Utilization Ratio',
        'Age': 'Age',
    },
    width=1100,
    height=900
)

# Adjust marker size and transparency
fig.update_traces(marker=dict(size=4, opacity=0.7))

# Show the plot
fig.show()

# Take a sample of the data for visualization
sampled_df = df.sample(2000, random_state=42)

# 2D Scatter Plot with Sampled Data
fig = px.scatter(
    sampled_df,
    x='Annual_Income',
    y='Credit_Utilization_Ratio',
    color='Cluster',
    title='Customer Segmentation (Sampled Data)',
    labels={'Annual_Income': 'Annual Income', 'Credit_Utilization_Ratio': 'Credit Utilization Ratio'},
    width=800,
    height=500
)

fig.update_traces(marker=dict(size=6, opacity=0.6))  # Adjust marker size and transparency
fig.show()

import plotly.express as px

# Distribution of Payment Behaviour
fig = px.histogram(
    df,
    x='Payment_Behaviour',
    color='Payment_Behaviour',
    title='Distribution of Payment Behaviour',
    labels={'Payment_Behaviour': 'Payment Behaviour'},
    width=800,
    height=500
)

fig.update_layout(
    xaxis_title="Payment Behaviour",
    yaxis_title="Count",
    showlegend=False
)

fig.show()

# Group by Payment Behaviour and Credit Score
fig = px.histogram(
    df,
    x='Payment_Behaviour',
    color='Credit_Score',
    title='Payment Behaviour Across Credit Scores',
    labels={'Payment_Behaviour': 'Payment Behaviour', 'Credit_Score': 'Credit Score'},
    width=800,
    height=500,
    barmode='group'
)

fig.update_layout(
    xaxis_title="Payment Behaviour",
    yaxis_title="Count"
)

fig.show()

import plotly.express as px

# Simplified violin chart for Annual Income vs Creditworthiness (Credit Score)
fig = px.violin(
    df,
    x='Credit_Score',
    y='Annual_Income',
    color='Credit_Score',
    box=True,  # Include box plot inside the violin
    title='Distribution of Annual Income Across Credit Scores',
    labels={'Annual_Income': 'Annual Income', 'Credit_Score': 'Credit Score'},
    width=800,
    height=500
)

fig.update_traces(points=False)  # Disable individual points
fig.show()

# Simplified violin chart for Monthly Inhand Salary vs Credit Score
fig = px.violin(
    df,
    x='Credit_Score',
    y='Monthly_Inhand_Salary',
    color='Credit_Score',
    box=True,  # Include box plot inside the violin
    title='Distribution of Monthly Inhand Salary Across Credit Scores',
    labels={'Monthly_Inhand_Salary': 'Monthly Inhand Salary', 'Credit_Score': 'Credit Score'},
    width=800,
    height=500
)

fig.update_traces(points=False)  # Disable individual points
fig.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Reduce clutter by sampling the dataset (e.g., 1000 points)
sampled_df = df.sample(n=1000, random_state=42)

# Select key features for pair plot
pair_plot_features = ['Annual_Income', 'Monthly_Inhand_Salary', 'Outstanding_Debt', 'Credit_Utilization_Ratio']
pair_plot_df = sampled_df[pair_plot_features + ['Credit_Score']]

# Create a less cluttered pair plot
sns.set(style="whitegrid")
pair_plot = sns.pairplot(
    pair_plot_df,
    hue='Credit_Score',
    palette={'Good': 'blue', 'Standard': 'orange', 'Poor': 'red'},
    diag_kind='kde',
    height=3,
    plot_kws={'alpha': 0.6, 's': 15}  # Add transparency and smaller point size
)

# Add a title to the pair plot
pair_plot.fig.suptitle('Pair Plot for Credit Score Analysis (Sampled Data)', y=1.02, fontsize=16)
plt.show()

"""# Conclusion
The analysis of customer data provides valuable insights into the factors influencing credit scores and offers guidance for Paisabazaar's credit assessment processes. Key findings include a focus on the working population aged 25-45, a significant portion of customers with moderate to high earning capacity, a balanced credit score distribution with a notable portion having poor credit scores, responsible credit management among customers, a competitive market with varying interest rates, and the importance of age, income, credit utilization, and payment history in influencing credit scores. These findings offer valuable insights for Paisabazaar to refine their credit assessment models and improve risk management strategies by focusing on specific customer segments and tailoring their financial product offerings. Additionally, the analysis highlights the need for continuous monitoring of credit score trends and customer behavior to stay updated with evolving financial landscapes.
"""